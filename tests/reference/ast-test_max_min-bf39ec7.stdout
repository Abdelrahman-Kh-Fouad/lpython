(Module [(ImportFrom ltypes [(i32 ()) (f32 ()) (f64 ())] 0) (FunctionDef test_max_int ([] [] [] [] [] [] []) [(AnnAssign (Name a Store) (Name i32 Load) (ConstantInt 1 ()) 1) (AnnAssign (Name b Store) (Name i32 Load) (ConstantInt 2 ()) 1) (AnnAssign (Name c Store) (Name i32 Load) (ConstantInt 3 ()) 1) (Assert (Compare (Call (Name max Load) [(Name a Load) (Name b Load)] []) Eq [(Name b Load)]) ()) (Assert (Compare (Call (Name max Load) [(Name a Load) (Name b Load) (Name c Load)] []) Eq [(Name c Load)]) ()) (Assert (Compare (Call (Name max Load) [(ConstantInt 1 ()) (ConstantInt 2 ()) (ConstantInt 3 ())] []) Eq [(ConstantInt 3 ())]) ()) (Assert (Compare (Call (Name max Load) [(ConstantInt 1 ()) (ConstantInt 6 ())] []) Eq [(ConstantInt 6 ())]) ())] [] () ()) (FunctionDef tes_max_float ([] [] [] [] [] [] []) [(AnnAssign (Name d Store) (Name f64 Load) (ConstantFloat 23.233000 ()) 1) (AnnAssign (Name e Store) (Name f64 Load) (ConstantFloat 23.223300 ()) 1) (AnnAssign (Name f Store) (Name f64 Load) (ConstantFloat 21.230000 ()) 1) (Assert (Compare (Call (Name max Load) [(Name d Load) (Name e Load) (Name f Load)] []) Eq [(Name d Load)]) ()) (Assert (Compare (Call (Name max Load) [(Name e Load) (Name f Load)] []) Eq [(Name e Load)]) ())] [] () ()) (FunctionDef test_min_int ([] [] [] [] [] [] []) [(AnnAssign (Name a Store) (Name i32 Load) (ConstantInt 1 ()) 1) (AnnAssign (Name b Store) (Name i32 Load) (ConstantInt 2 ()) 1) (AnnAssign (Name c Store) (Name i32 Load) (ConstantInt 3 ()) 1) (Assert (Compare (Call (Name min Load) [(Name a Load) (Name b Load)] []) Eq [(Name a Load)]) ()) (Assert (Compare (Call (Name min Load) [(Name a Load) (Name b Load) (Name c Load)] []) Eq [(Name a Load)]) ()) (Assert (Compare (Call (Name min Load) [(ConstantInt 1 ()) (ConstantInt 2 ()) (ConstantInt 3 ())] []) Eq [(ConstantInt 1 ())]) ()) (Assert (Compare (Call (Name min Load) [(ConstantInt 1 ()) (ConstantInt 6 ())] []) Eq [(ConstantInt 1 ())]) ())] [] () ()) (FunctionDef test_min_float ([] [] [] [] [] [] []) [(AnnAssign (Name d Store) (Name f64 Load) (ConstantFloat 23.233000 ()) 1) (AnnAssign (Name e Store) (Name f64 Load) (ConstantFloat 23.223300 ()) 1) (AnnAssign (Name f Store) (Name f64 Load) (ConstantFloat 21.230000 ()) 1) (Assert (Compare (Call (Name min Load) [(Name d Load) (Name e Load) (Name f Load)] []) Eq [(Name f Load)]) ()) (Assert (Compare (Call (Name min Load) [(Name e Load) (Name f Load)] []) Eq [(Name f Load)]) ())] [] () ()) (FunctionDef check ([] [] [] [] [] [] []) [(Expr (Call (Name test_max_int Load) [] [])) (Expr (Call (Name tes_max_float Load) [] [])) (Expr (Call (Name test_min_int Load) [] [])) (Expr (Call (Name test_min_float Load) [] []))] [] () ()) (Expr (Call (Name check Load) [] []))] [])
