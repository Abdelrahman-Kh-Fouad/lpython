(Module [(Assign [(Tuple [(Name x Store)] Store)] (ConstantInt 10 ()) ()) (Assign [(Tuple [(Name y Store)] Store)] (ConstantInt 14 ()) ()) (Assign [(Tuple [(Name z Store)] Store)] (ConstantInt 12 ()) ()) (If (BoolOp And [(Compare (Name x Load) GtE [(Name y Load)]) (Compare (Name x Load) GtE [(Name z Load)])]) [(Assign [(Tuple [(Name largest Store)] Store)] (Name x Load) ()) (Expr (Call (Name print Load) [(ConstantStr "Largest: " ()) (Name x Load)] []))] [(If (BoolOp And [(Compare (Name y Load) GtE [(Name x Load)]) (Compare (Name y Load) GtE [(Name z Load)])]) [(Assign [(Tuple [(Name largest Store)] Store)] (Name y Load) ()) (Expr (Call (Name print Load) [(ConstantStr "Largest: " ()) (Name y Load)] []))] [(Assign [(Tuple [(Name largest Store)] Store)] (Name z Load) ()) (Expr (Call (Name print Load) [(ConstantStr "Largest: " ()) (Name z Load)] []))])]) (If (Compare (Name y Load) Gt [(ConstantInt 10 ())]) [(Expr (Call (Name print Load) [(ConstantStr "Above ten," ())] [])) (If (Compare (Name y Load) Gt [(ConstantInt 20 ())]) [(Expr (Call (Name print Load) [(ConstantStr "and also above 20!" ())] []))] [(Expr (Call (Name print Load) [(ConstantStr "but not above 20." ())] []))])] [])] [])
